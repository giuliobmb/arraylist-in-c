// -*- mode: C; -*-
// arraylist.c starts here
// implementation of a string ArrayList
#ifndef ARRAYLIST_C_
#define ARRAYLIST_C_

#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include "arraylist.h"

struct _arraylist {
  void** data;
  int size;
  size_t byte_size;
};

ArrayList initialise(){ 
  ArrayList array = malloc(sizeof(struct _arraylist));
  (*array).size = 0;
  (*array).byte_size = 0;
  (*array).data = NULL;
  return array;
}

int insert(ArrayList array, void* data){

  if(data == NULL){
    return -1;
  }
  //calculating total byte size
  size_t new_byte_size = (*array).byte_size + sizeof( data );
  
  void** new_data = malloc(sizeof(void*) * new_byte_size);

  if(new_data == NULL)
    return -2;

  
  for(int i=0; i<(*array).size; i++){
    if((*array).data[i] == NULL)
      continue;
    new_data[i] = (*array).data[i];
    }
  
  free((*array).data);
  new_data[(*array).size + 1] = data;
  
  (*array).size++;
  (*array).byte_size = new_byte_size;
  (*array).data = new_data;
 
}

void* get(ArrayList array, int index){
  if((*array).data[index] == NULL)
    return NULL;
  return (*array).data[index];
}

int size(ArrayList array){
  return (*array).size;
}

#endif //ARRAYLIST_C_

// arraylist.c ends here
